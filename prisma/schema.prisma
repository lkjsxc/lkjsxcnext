// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generator block specifies the client library to generate.
generator client {
  provider = "prisma-client-js"
  // Specifies the output directory for the generated Prisma Client.
  // Make sure your application imports from this path, e.g., '@/generated/prisma'
  output   = "../src/generated/prisma"
}

// Datasource block specifies the database connection.
datasource db {
  provider = "sqlite" // Using SQLite as per your DATABASE_URL
  url      = env("DATABASE_URL") // Loads the URL from the environment variable
}

// --- NextAuth Models ---
// These models are required by the NextAuth Prisma Adapter.
// See: https://next-auth.js.org/adapters/prisma

// User model: Represents authenticated users.
model User {
  id            String    @id @default(cuid()) // Unique ID for the user
  name          String?                        // User's display name
  email         String?   @unique                // User's email address (must be unique)
  emailVerified DateTime?                      // Timestamp when the email was verified
  image         String?                        // URL to the user's profile image

  // --- Relations ---
  // Relation to Account model (for OAuth providers)
  accounts Account[]
  // Relation to Session model (for user sessions)
  sessions Session[]
  // Relation to your custom Memo model
  memos    Memo[]
}

// Account model: Links OAuth accounts (e.g., Google) to a User.
model Account {
  id                String  @id @default(cuid())
  userId            String                       // Foreign key linking to the User model
  type              String                       // Type of account (e.g., "oauth", "email")
  provider          String                       // Name of the OAuth provider (e.g., "google", "github")
  providerAccountId String                       // User's ID as given by the provider
  refresh_token     String?                      // OAuth refresh token
  access_token      String?                      // OAuth access token
  expires_at        Int?                         // Expiry timestamp for the access token
  token_type        String?                      // Type of token (e.g., "Bearer")
  scope             String?                      // Scopes granted by the user
  id_token          String?                      // OAuth ID token
  session_state     String?                      // OAuth session state

  // --- Relation back to User ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensures that each provider/account ID combination is unique.
  @@unique([provider, providerAccountId])
}

// Session model: Stores user session information.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique                // Unique token identifying the session
  userId       String                       // Foreign key linking to the User model
  expires      DateTime                     // When the session expires

  // --- Relation back to User ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model: Used for email verification flows (passwordless login).
model VerificationToken {
  identifier String
  token      String   @unique // The verification token
  expires    DateTime      // When the token expires

  // Ensures that each identifier/token combination is unique.
  @@unique([identifier, token])
}


// --- Your Custom Models ---

// Memo model: Represents the notes created by users.
model Memo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())      // Timestamp when the memo was created
  updatedAt DateTime @updatedAt          // Timestamp when the memo was last updated
  title     String                       // Title of the memo
  content   String?                      // Content of the memo (optional)
  authorId  String                       // Foreign key linking to the User model (author)

  // --- Relation back to User ---
  // Defines the relationship between Memo and User (author)
  // onDelete: Cascade means if the User is deleted, their Memos are also deleted.
  // Change to Restrict or SetNull if you want different behavior.
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}